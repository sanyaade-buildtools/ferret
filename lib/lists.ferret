-- lists.ferret
--

in Lists use Ext ;

-- create a list from a single item
: list ( x -- xs ) [] swap , ;

-- create a list with an element repeated n times
: rep ( x n -- xs ) let x n -> [n for x next] ;

-- apply a block n times and collect the results
: collect ( xt n -- xs ) let f n -> [n for f apply next] ;

-- generate a list of numbers from [1..n]
: iota ( n -- xs ) let n -> [n for n i - next] ;

-- find the last element of a list
: last ( xs -- x ) uncons swap each drop i next ;

-- get the nth tail of a list
: nthtail ( xs n -- xs' ) for tl next ;

-- get the nth item of a list
: nth ( xs n -- x ) nthtail hd ;

-- true if any item in a list matches a predicate
: any ( xs p -- bool ) let p -> each i p apply if T exit then next F ;

-- true if all items in a list match a predicate
: all ( xs p -- bool ) inverse any not ;

-- return the first element of a list to match a predicate
: find ( xs p -- x T | F ) let p -> each i p apply if i T exit then next F ;

-- return true if any element of a list is x
: elem ( xs x -- bool ) is any ;

-- apply a block for every element in a list
: iter ( xs xt -- j*x ) let f -> each i f apply next ;

-- concatenate two lists
: append ( xs ys -- xs' ) {,} foldr ;

-- join a list of lists
: concat ( [xs] -- xs ) [] {append} foldl ; 

-- map a block across a list, collect the results
: map ( xs xt -- xs' ) let xs f -> [xs each i f apply next] ;

-- delete elements from a list that do not match a predicate
: filter ( xs p -- xs' ) let xs p -> [xs each i p apply if i then next] ;

-- remove elements from a list that match a predicate
: remove-if ( xs p -- xs' ) inverse filter ;

-- remove all occurances of an element from a list
: remove ( xs x -- xs ) is remove-if ;

-- count how many times a predicate is matched in a list
: count-if ( xs p -- n ) {if 1+ then} compose 0 swap foldl ;

-- count the number of times an element occurs in a list
: count ( xs x -- n ) is count-if ;

-- find the best fit in a list
: select ( xs f -- x ) push uncons pop foldl ;

-- permute two lists via a function
: zip-with ( xs ys f -- xs' )
  let xs ys f -> [xs each i ys each dup i f apply swap next drop next] ;

-- permute two lists with the pair function
: zip ( xs ys -- xs' ) {pair} zip-with ;

-- create a new list with an element inserted between others
: intersperse ( xs x -- xs' )
  let xs x -> xs null if [] else drop [xs tl each x i next] xs hd , then ;

-- split a list into two lists using a predicate
: partition ( xs p -- xs ys ) 2dup filter -rot remove-if swap ;

-- take the top n items from a list
: take ( xs n -- xs' )
  dup 0= if drop [] else 1- swap uncons push swap recurse pop , then ;

-- take items from a list until a predicate is matched
: take-until ( xs p -- xs ys )
  let xs f -> xs null if [] [] else   
    uncons dup f apply if , [] else push f recurse pop , then
  then ;

-- take items from a list while a predicate holds
: take-while ( xs p -- xs ys ) inverse take-until ;

-- drop all but the last n items from a list
: take-last ( xs n -- xs' )
  over swap nthtail begin null not while tl push tl pop repeat ;

-- insert an element into a list using a comparison function
: insert-with ( xs x f -- xs' ) let x f -> x f curry take-while swap x , append ;

-- insert an element into a list in ascending order
: insert ( xs x -- xs' ) {<} insert-with ;

-- randomize the elements of a list
: randomize ( xs -- xs' ) {uniform swap pair} map sort {snd} map ;

