-- core.ferret
--

in Ext use Core ;

-- additional stack primitives
: tuck ( a b -- a b a ) swap over ;

-- swap the top of stack with the top of the control stack
: replace ( cs: a; b -- cs: b; a ) pop swap push ;

-- fetch and store to the control stack
: get ( cs: x; -- cs: x; x ) pop dup push ;
: put ( cs: x; y -- cs: y; ) pop drop push ;

-- fmap the top control stack item
: modify ( cs: x; xt -- cs: x ) pop swap apply push ;

-- control stack operations
: do ( x xt -- j*x x ) swap push apply pop ;
: lift ( cs: x; xt -- cs: x; j*x ) pop let x -> apply x push ;

-- conditional assertion
: assert ( bool -- ) not if "assertion failed" abort then ;

-- forced failure
: fail ( -- ) "failure" abort ;

-- equality function
: is ( x -- xt ) let x -> {x =} ;

-- optionally execute a block
: maybe ( bool xt -- j*x bool ) swap if apply T else drop F then ;

-- only perform a branch if the second stack item is true or false
: andalso ( bool xt -- j*x ) swap if apply else drop F then ;
: orelse ( bool xt -- j*x ) swap if drop F else apply then ;

-- try multiple branches
: case ( [xt] -- j*x ) each i try if exit then next "case failed" abort ;

-- currying values into a block
: curry ( x xt -- xt ) let x block -> {x block apply} ;

-- composing blocks
: compose ( xt xt -- xt ) let a b -> {a apply b apply} ;

-- exchange the arguments to a function
: flip ( xt -- xt ) {swap} swap compose ;

-- logical inverse the result of a function
: inverse ( xt -- xt ) {not} compose ;

-- type predicate
: type? ( t -- xt ) swap type = ;

-- type predicates
: atom? ( x -- bool ) Atom type? ;
: block? ( x -- bool ) Block type? ;
: bool? ( x -- bool ) Bool type? ;
: char? ( x -- bool ) Char type? ;
: file? ( x -- bool ) File type? ;
: float? ( x -- bool ) Float type? ;
: int? ( x -- bool ) Int type? ;
: list? ( x -- bool ) List type? ;
: pair? ( x -- bool ) Pair type? ;
: pid? ( x -- bool ) Pid type? ;
: string? ( x -- bool ) String type? ;
: tuple? ( x -- bool ) Tuple type? ;
: url? ( x -- bool ) Url type? ;

-- apply a block n times
: times ( xt n -- j*x ) swap {for get lift next} do drop ;

-- print anything to stdout
: . ( x -- ) form puts ;

-- time how long a block takes to execute
: time ( xt -- j*x ) clock swap do clock swap - "Time: " print . ;

