-- deck of cards demo
--
-- Try it out: 
--

in Cards use Ext Lists ;

-- definition of cards
: pips ( -- xs ) [2 3 4 5 6 7 8 9 Jack Queen King Ace] ;
: suits ( -- xs ) [Clubs Diamonds Hearts Spades] ;

-- create a deck with all the cards in it
: deck ( -- cs ) pips suits zip ;

-- generate a bucket of counted pips
: buckets ( cs -- xs ) let cs -> [pips each cs {fst i =} count-if next] ;

-- check for a pair, set, or quads
: pair? ( xs -- bool ) {2 =} any ;
: set? ( xs -- bool ) {3 =} any ;
: quads? ( xs -- bool ) {4 =} any ;
: full-house? ( xs -- bool ) dup pair? {set?} andalso ;

-- evaluate a hand of cards
: score ( cs -- )
  dup . buckets [ {quads? assert "Quads!"}
                  {full-house? assert "Full house!"}
                  {set? assert "Set!"}
                  {pair? assert "Pair!"}
                  {drop "High card"}
                ] case . ;

-- shuffle a deck and deal 5 hands, scoring each
: deal ( -- ) deck randomize {5 take score} 5 times drop ;

